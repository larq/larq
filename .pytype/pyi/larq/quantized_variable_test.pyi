# (generated with --quick)

import larq.quantized_variable
from typing import Any, Type

DistributedVariable: module
QuantizedVariable: Type[larq.quantized_variable.QuantizedVariable]
assert_almost_equal: Any
assert_array_equal: Any
pytest: module
quantized_scope: module
test_optimizer: Any
tf: module
version: module

def evaluate(tensors) -> Any: ...
def get_var(val, dtype = ..., name = ...) -> Any: ...
def test_assign(quantized, distribute_scope, eager_and_graph_mode) -> None: ...
def test_checkpoint(tmp_path, eager_and_graph_mode) -> None: ...
def test_inheritance(distribute_scope) -> None: ...
def test_invalid_wrapped_usage(distribute_scope) -> None: ...
def test_method_delegations(distribute_scope, eager_and_graph_mode) -> None: ...
def test_overloads(quantized, distribute_scope, eager_and_graph_mode) -> None: ...
def test_read(distribute_scope, eager_and_graph_mode) -> None: ...
def test_read_nested_scopes(distribute_scope, eager_and_graph_mode) -> None: ...
def test_repr(snapshot, eager_and_graph_mode) -> None: ...
def test_scatter_method_delegations(eager_and_graph_mode) -> None: ...
def test_sparse_reads(eager_and_graph_mode) -> None: ...
def test_tensor_equality(quantized, eager_mode) -> None: ...
