# (generated with --quick)

from typing import Any

DistributedVariable: module
ops: module
quantized_scope: module
resource_variable_ops: module
tf: module

class QuantizedVariable(Any):
    __doc__: str
    _shared_name: Any
    aggregation: Any
    constraint: Any
    device: Any
    dtype: Any
    graph: Any
    initial_value: Any
    initializer: Any
    latent_variable: Any
    name: Any
    op: Any
    precision: Any
    quantizer: Any
    shape: Any
    synchronization: Any
    trainable: Any
    def __getattr__(self, name) -> Any: ...
    def __init__(self, variable, quantizer = ..., precision = ...) -> None: ...
    def __repr__(self) -> str: ...
    def _as_graph_element(self) -> Any: ...
    def _dense_var_to_tensor(self, *args, **kwargs) -> Any: ...
    def _gather_saveables_for_checkpoint(self) -> Any: ...
    @staticmethod
    def _get_name(obj) -> Any: ...
    @staticmethod
    def _maybe_wrap(variable, quantizer, precision, wrap = ...) -> Any: ...
    def _quantize(self, value) -> Any: ...
    def _should_act_as_resource_variable(self) -> None: ...
    def assign(self, value, use_locking = ..., name = ..., read_value = ...) -> Any: ...
    def assign_add(self, delta, use_locking = ..., name = ..., read_value = ...) -> Any: ...
    def assign_sub(self, delta, use_locking = ..., name = ..., read_value = ...) -> Any: ...
    def batch_scatter_update(self, *args, **kwargs) -> Any: ...
    def count_up_to(self, *args, **kwargs) -> Any: ...
    def eval(self, session = ...) -> Any: ...
    def from_proto(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_variable(cls, variable, quantizer = ..., precision = ...) -> Any: ...
    def gather_nd(self, *args, **kwargs) -> Any: ...
    def get_shape(self) -> Any: ...
    def initialized_value(self) -> Any: ...
    def load(self, *args, **kwargs) -> Any: ...
    def numpy(self) -> Any: ...
    def read_value(self) -> Any: ...
    def scatter_add(self, *args, **kwargs) -> Any: ...
    def scatter_div(self, *args, **kwargs) -> Any: ...
    def scatter_max(self, *args, **kwargs) -> Any: ...
    def scatter_min(self, *args, **kwargs) -> Any: ...
    def scatter_mul(self, *args, **kwargs) -> Any: ...
    def scatter_nd_add(self, *args, **kwargs) -> Any: ...
    def scatter_nd_sub(self, *args, **kwargs) -> Any: ...
    def scatter_nd_update(self, *args, **kwargs) -> Any: ...
    def scatter_sub(self, *args, **kwargs) -> Any: ...
    def scatter_update(self, *args, **kwargs) -> Any: ...
    def set_shape(self, *args, **kwargs) -> Any: ...
    def sparse_read(self, *args, **kwargs) -> Any: ...
    def to_proto(self, *args, **kwargs) -> Any: ...
    def value(self) -> Any: ...
