# (generated with --quick)

from typing import Any, Dict, List, NoReturn, Optional, TypeVar

__all__: List[str]
lq: module
tf: module
utils: module
warnings: module

_T = TypeVar('_T')

class Bop(Any):
    __doc__: str
    def __init__(self, threshold = ..., gamma = ..., name = ..., **kwargs) -> None: ...
    def _create_slots(self, var_list) -> None: ...
    def _get_decayed_hyper(self, name, var_dtype) -> Any: ...
    def _resource_apply_dense(self, grad, var) -> Any: ...
    def _resource_apply_sparse(self, grad, var, indices) -> NoReturn: ...
    @classmethod
    def from_config(cls, config, custom_objects = ...) -> Any: ...
    def get_config(self) -> dict: ...
    @staticmethod
    def is_binary_variable(var) -> bool: ...

class CaseOptimizer(Any):
    DEFAULT_OPT_INDEX: int
    __doc__: str
    default: Any
    optimizers: list
    pred_opt_pairs: tuple
    var_opt_mapping: Optional[Dict[Any, int]]
    weights: list
    def __init__(self, *predicate_optimizer_pairs, default_optimizer = ..., name = ...) -> None: ...
    def _compute_var_opt_mapping(self, grads_and_vars) -> None: ...
    def apply_gradients(self, grads_and_vars, name = ...) -> Any: ...
    @classmethod
    def from_config(cls, original_config, custom_objects = ...) -> Any: ...
    def get_config(self) -> dict: ...

def deepcopy(x: _T, memo: Optional[Dict[int, _T]] = ..., _nil = ...) -> _T: ...
